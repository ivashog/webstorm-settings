<application>
  <component name="LanguageInjectionConfiguration">
    <injection language="SQL" injector-id="js">
      <display-name>SQL select/delete/insert/update/create</display-name>
      <single-file value="true" />
      <place><![CDATA[jsLiteralExpression().withText(string().matchesBrics("[\"'`] *(((SELECT|DELETE) .*FROM)|((INSERT|REPLACE) .*INTO)|(UPDATE .* SET)|((CREATE|DROP|ALTER) +((TEMPORARY )?TABLE|(UNIQUE )?INDEX))) .*[\"'`]?"))]]></place>
    </injection>
    <injection language="PostgreSQL" injector-id="js">
      <display-name>SQL tag with expression</display-name>
      <prefix>SELECT</prefix>
      <value-pattern>^(?!SELECT|INSERT|UPDATE|WITH)(.*).*</value-pattern>
      <single-file value="false" />
      <place><![CDATA[taggedString("sql")]]></place>
      <templateTag>sql</templateTag>
    </injection>
    <injection language="SQL" injector-id="js">
      <display-name>SQL tagged string</display-name>
      <single-file value="false" />
      <place><![CDATA[taggedString("sql")]]></place>
      <templateTag>sql</templateTag>
    </injection>
    <injection language="PostgreSQL" injector-id="sql">
      <display-name>PostgreSQL dblink</display-name>
      <single-file value="true" />
      <place><![CDATA[sqlElement().forDialects("PostgreSQL").functionArgument(0, sqlFunctionCall().name("dblink", "dblink_exec").params(sqlExpressions().count(1, 2).atOpt(1, sqlExpression().withType("boolean"))))]]></place>
      <place><![CDATA[sqlElement().forDialects("PostgreSQL").functionArgument(1, sqlFunctionCall().name("dblink", "dblink_exec").params(sqlExpressions().count(2, 3)))]]></place>
      <place><![CDATA[sqlElement().forDialects("PostgreSQL").functionArgument(1, sqlFunctionCall().name("dblink_open").params(sqlExpressions().count(2, 3).atOpt(2, sqlExpression().withType("boolean"))))]]></place>
      <place><![CDATA[sqlElement().forDialects("PostgreSQL").functionArgument(1, sqlFunctionCall().name("dblink_send_query").params(sqlExpressions().count(2)))]]></place>
      <place><![CDATA[sqlElement().forDialects("PostgreSQL").functionArgument(2, sqlFunctionCall().name("dblink_open").params(sqlExpressions().count(3, 4)))]]></place>
    </injection>
  </component>
</application>